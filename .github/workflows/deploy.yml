name: Deploy to github pages

on: 
  push: 
    branches: 
    - main
    - dev

jobs:
  build:
    runs-on: ubuntu-latest
    # Environment variables should be declared, if there are multiple jobs, on each job!
    env:
      NODE_ENV: ${{ vars.NODE_ENV }}

    # Services, are docker containers that handle premaid solutions for database management or other common stuff. 
    services:
      redis:
        image: redis
        ports:
        - 6379:6379

    steps:
      # Secrets are printed as *** by github, so no problem.
      - name: print-secret
        run: echo "${{ secrets.TOKEN }}"
      
      # Environment variables are public, can be accessed from github or printed, they need to be declared on each job from the object vars
      - name: print-env
        run: echo "${{ env.NODE_ENV }}"

      # We can access the virtual machine and install elements manually using bash commands. 
      - name: install redis-cli
        run: sudo apt-get update -y && sudo apt-get install redis-tools -y
      
      - name: test redis connection
        run: redis-cli -h localhost -p 6379 ping

      # In order to build the project, we can use a github action, that installs the dependencies necesary to run the application, in this case node.js
      - name: node-setup
        # Keyword to use and action is uses, actionsRepository / action-name @ version
        uses: actions/setup-node@v4
        with: 
          node-version: '18'

      # Checkout, copies the application folder and locates the bash terminal on the root. 
      - name: Checkout
        uses: actions/checkout@v4

      # Then, we since we already installed node, and have our application, we can install dependencies and run tests.
      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test

      # Build the application
      - name: Run Build
        run: npm run build

      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Artifact after build is created in public folder this is what github pages uses for deployment.
          path: public/ 

  deploy:
    runs-on: ubuntu-latest
    # needs keyword is what allows the pipeline, deploy job only begins if build job is successful.
    needs: build

    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment-pages.outputs.page_url }}

    steps:
    - name: Start Deploy
      run: echo "Deploying..........."

    - name: Deploy
      id: deployment-pages
      uses: actions/deploy-pages@v4

    - name: End Deploy
      run: echo "Finish Deploy........"
  
  notification:
    if: ${{ always()}} # This forces the execution of the job, even if the previous job fails, we also have success(), and failure()
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Notify
      run: echo "Sending notification regardles of the test results..."

